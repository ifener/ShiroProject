<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans    
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd    
                        http://www.springframework.org/schema/context    
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd    
                        http://www.springframework.org/schema/mvc    
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">

	<!-- 缓存管理器 使用Ehcache实现 -->
	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManagerConfigFile" value="classpath:ehcache.xml" />
	</bean>

	<!-- 凭证密码匹配器 -->
	<bean id="credentialsMatcher" class="com.wey.shrio.matcher.RetryLimitHashedCredentialsMatcher">
		<constructor-arg ref="cacheManager" />
		<!-- 匹配器使用md5算法 -->
		<property name="hashAlgorithmName" value="md5" />
		<!-- 密码进行几次散列（用md5算法做几次运算） -->
		<property name="hashIterations" value="2" />
		<property name="storedCredentialsHexEncoded" value="true" />
	</bean>

	<!--rememberMe 30天 -->
	<bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg value="KEN_COOKIE_SHIRO" />
		<!-- 浏览器中通过document.cookie可以获取cookie属性，设置了HttpOnly=true,在脚本中就不能的到cookie了。可以避免cookie被盗用。 -->
		<property name="httpOnly" value="true" />
		<property name="maxAge" value="2592000" />
	</bean>

	<!-- rememberMe管理器 -->
	<bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
		<property name="cipherKey" value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}" />
		<property name="cookie" ref="rememberMeCookie" />
	</bean>

	<!-- Realm实现 -->
	<bean id="userRealm" class="com.wey.shrio.realm.UserRealm">
		<!-- 匹配器 -->
		<property name="credentialsMatcher" ref="credentialsMatcher" />
		<!-- <property name="cacheManager" ref="cacheManager"></property> <property name="cachingEnabled" value="true"/> <property name="authenticationCachingEnabled" value="true"/> <property name="authenticationCacheName" 
			value="authenticationCache"/> <property name="authorizationCachingEnabled" value="true"/> <property name="authorizationCacheName" value="authorizationCache"/> -->
	</bean>

    <!-- SSL过滤器，指定端口，默认的端口是80 -->
	<bean id="sslFilter" class="org.apache.shiro.web.filter.authz.SslFilter">
		<property name="port" value="8443" />
	</bean>

	<!-- 安全管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- 继承AuthorizingRealm的类 -->
		<property name="realm" ref="userRealm" />
		<property name="rememberMeManager" ref="rememberMeManager" />
		<property name="cacheManager" ref="cacheManager" />
	</bean>

	<!-- 基于Form表单的身份验证过滤器 -->
	<bean id="formAuthenticationFilter" class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter">
		<property name="usernameParam" value="username" />
		<property name="passwordParam" value="password" />
		<property name="loginUrl" value="/login" />
	</bean>

	<!-- Shiro的Web过滤器 -->
	<!-- 需要注意filterChainDefinitions过滤器中对于路径的配置是有顺序的，当找到匹配的条目之后容器不会再继续寻找。 因此带有通配符的路径要放在后面。三条配置的含义是： /authc/admin需要用户有用admin权限、 /authc/**用户必须登录才能访问、/**其他所有路径任何人都可以访问。 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="/login" />
		<property name="successUrl" value="/" />
		<property name="unauthorizedUrl" value="/denied" />
		<!-- 过滤器 -->
		<!-- filters属性用于定义自己的过滤器，即ini配置中的[filters]部分；filterChainDefinitions用于声明url和filter的关系，即ini配置中的[urls]部分。 -->
		<property name="filters">
			<map>
				<!--<entry key="authc" value-ref="formAuthenticationFilter" />-->
             	<entry key="ssl" value-ref="sslFilter"/>
			</map>
		</property>
		<property name="filterChainDefinitions">
			<value>
			    /login = ssl
				/admin/index = roles[admin]
				/home/** = authc
				/changePassword/** = authc
				/users/** = user
				<!-- 基于Basic的拦截器身份验证 -->
				/role/** = authcBasic,roles[admin]
				/guest/** = anon
				/** = anon
			</value>
		</property>
	</bean>
</beans>